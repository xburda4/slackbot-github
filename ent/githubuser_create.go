// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slackbot/ent/githubuser"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GithubUserCreate is the builder for creating a GithubUser entity.
type GithubUserCreate struct {
	config
	mutation *GithubUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGhUsername sets the "gh_username" field.
func (guc *GithubUserCreate) SetGhUsername(s string) *GithubUserCreate {
	guc.mutation.SetGhUsername(s)
	return guc
}

// SetSlackID sets the "slack_id" field.
func (guc *GithubUserCreate) SetSlackID(s string) *GithubUserCreate {
	guc.mutation.SetSlackID(s)
	return guc
}

// SetGhAccessToken sets the "gh_access_token" field.
func (guc *GithubUserCreate) SetGhAccessToken(s string) *GithubUserCreate {
	guc.mutation.SetGhAccessToken(s)
	return guc
}

// SetCreatedAt sets the "created_at" field.
func (guc *GithubUserCreate) SetCreatedAt(t time.Time) *GithubUserCreate {
	guc.mutation.SetCreatedAt(t)
	return guc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guc *GithubUserCreate) SetNillableCreatedAt(t *time.Time) *GithubUserCreate {
	if t != nil {
		guc.SetCreatedAt(*t)
	}
	return guc
}

// SetUpdatedAt sets the "updated_at" field.
func (guc *GithubUserCreate) SetUpdatedAt(t time.Time) *GithubUserCreate {
	guc.mutation.SetUpdatedAt(t)
	return guc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (guc *GithubUserCreate) SetNillableUpdatedAt(t *time.Time) *GithubUserCreate {
	if t != nil {
		guc.SetUpdatedAt(*t)
	}
	return guc
}

// SetID sets the "id" field.
func (guc *GithubUserCreate) SetID(u uuid.UUID) *GithubUserCreate {
	guc.mutation.SetID(u)
	return guc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (guc *GithubUserCreate) SetNillableID(u *uuid.UUID) *GithubUserCreate {
	if u != nil {
		guc.SetID(*u)
	}
	return guc
}

// Mutation returns the GithubUserMutation object of the builder.
func (guc *GithubUserCreate) Mutation() *GithubUserMutation {
	return guc.mutation
}

// Save creates the GithubUser in the database.
func (guc *GithubUserCreate) Save(ctx context.Context) (*GithubUser, error) {
	guc.defaults()
	return withHooks(ctx, guc.sqlSave, guc.mutation, guc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (guc *GithubUserCreate) SaveX(ctx context.Context) *GithubUser {
	v, err := guc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (guc *GithubUserCreate) Exec(ctx context.Context) error {
	_, err := guc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guc *GithubUserCreate) ExecX(ctx context.Context) {
	if err := guc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guc *GithubUserCreate) defaults() {
	if _, ok := guc.mutation.CreatedAt(); !ok {
		v := githubuser.DefaultCreatedAt
		guc.mutation.SetCreatedAt(v)
	}
	if _, ok := guc.mutation.UpdatedAt(); !ok {
		v := githubuser.DefaultUpdatedAt
		guc.mutation.SetUpdatedAt(v)
	}
	if _, ok := guc.mutation.ID(); !ok {
		v := githubuser.DefaultID()
		guc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guc *GithubUserCreate) check() error {
	if _, ok := guc.mutation.GhUsername(); !ok {
		return &ValidationError{Name: "gh_username", err: errors.New(`ent: missing required field "GithubUser.gh_username"`)}
	}
	if _, ok := guc.mutation.SlackID(); !ok {
		return &ValidationError{Name: "slack_id", err: errors.New(`ent: missing required field "GithubUser.slack_id"`)}
	}
	if _, ok := guc.mutation.GhAccessToken(); !ok {
		return &ValidationError{Name: "gh_access_token", err: errors.New(`ent: missing required field "GithubUser.gh_access_token"`)}
	}
	if _, ok := guc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GithubUser.created_at"`)}
	}
	if _, ok := guc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GithubUser.updated_at"`)}
	}
	return nil
}

func (guc *GithubUserCreate) sqlSave(ctx context.Context) (*GithubUser, error) {
	if err := guc.check(); err != nil {
		return nil, err
	}
	_node, _spec := guc.createSpec()
	if err := sqlgraph.CreateNode(ctx, guc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	guc.mutation.id = &_node.ID
	guc.mutation.done = true
	return _node, nil
}

func (guc *GithubUserCreate) createSpec() (*GithubUser, *sqlgraph.CreateSpec) {
	var (
		_node = &GithubUser{config: guc.config}
		_spec = sqlgraph.NewCreateSpec(githubuser.Table, sqlgraph.NewFieldSpec(githubuser.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = guc.conflict
	if id, ok := guc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := guc.mutation.GhUsername(); ok {
		_spec.SetField(githubuser.FieldGhUsername, field.TypeString, value)
		_node.GhUsername = value
	}
	if value, ok := guc.mutation.SlackID(); ok {
		_spec.SetField(githubuser.FieldSlackID, field.TypeString, value)
		_node.SlackID = value
	}
	if value, ok := guc.mutation.GhAccessToken(); ok {
		_spec.SetField(githubuser.FieldGhAccessToken, field.TypeString, value)
		_node.GhAccessToken = value
	}
	if value, ok := guc.mutation.CreatedAt(); ok {
		_spec.SetField(githubuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := guc.mutation.UpdatedAt(); ok {
		_spec.SetField(githubuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GithubUser.Create().
//		SetGhUsername(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GithubUserUpsert) {
//			SetGhUsername(v+v).
//		}).
//		Exec(ctx)
func (guc *GithubUserCreate) OnConflict(opts ...sql.ConflictOption) *GithubUserUpsertOne {
	guc.conflict = opts
	return &GithubUserUpsertOne{
		create: guc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GithubUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (guc *GithubUserCreate) OnConflictColumns(columns ...string) *GithubUserUpsertOne {
	guc.conflict = append(guc.conflict, sql.ConflictColumns(columns...))
	return &GithubUserUpsertOne{
		create: guc,
	}
}

type (
	// GithubUserUpsertOne is the builder for "upsert"-ing
	//  one GithubUser node.
	GithubUserUpsertOne struct {
		create *GithubUserCreate
	}

	// GithubUserUpsert is the "OnConflict" setter.
	GithubUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetGhUsername sets the "gh_username" field.
func (u *GithubUserUpsert) SetGhUsername(v string) *GithubUserUpsert {
	u.Set(githubuser.FieldGhUsername, v)
	return u
}

// UpdateGhUsername sets the "gh_username" field to the value that was provided on create.
func (u *GithubUserUpsert) UpdateGhUsername() *GithubUserUpsert {
	u.SetExcluded(githubuser.FieldGhUsername)
	return u
}

// SetSlackID sets the "slack_id" field.
func (u *GithubUserUpsert) SetSlackID(v string) *GithubUserUpsert {
	u.Set(githubuser.FieldSlackID, v)
	return u
}

// UpdateSlackID sets the "slack_id" field to the value that was provided on create.
func (u *GithubUserUpsert) UpdateSlackID() *GithubUserUpsert {
	u.SetExcluded(githubuser.FieldSlackID)
	return u
}

// SetGhAccessToken sets the "gh_access_token" field.
func (u *GithubUserUpsert) SetGhAccessToken(v string) *GithubUserUpsert {
	u.Set(githubuser.FieldGhAccessToken, v)
	return u
}

// UpdateGhAccessToken sets the "gh_access_token" field to the value that was provided on create.
func (u *GithubUserUpsert) UpdateGhAccessToken() *GithubUserUpsert {
	u.SetExcluded(githubuser.FieldGhAccessToken)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GithubUserUpsert) SetCreatedAt(v time.Time) *GithubUserUpsert {
	u.Set(githubuser.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GithubUserUpsert) UpdateCreatedAt() *GithubUserUpsert {
	u.SetExcluded(githubuser.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubUserUpsert) SetUpdatedAt(v time.Time) *GithubUserUpsert {
	u.Set(githubuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubUserUpsert) UpdateUpdatedAt() *GithubUserUpsert {
	u.SetExcluded(githubuser.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GithubUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(githubuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GithubUserUpsertOne) UpdateNewValues() *GithubUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(githubuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GithubUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GithubUserUpsertOne) Ignore() *GithubUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GithubUserUpsertOne) DoNothing() *GithubUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GithubUserCreate.OnConflict
// documentation for more info.
func (u *GithubUserUpsertOne) Update(set func(*GithubUserUpsert)) *GithubUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GithubUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetGhUsername sets the "gh_username" field.
func (u *GithubUserUpsertOne) SetGhUsername(v string) *GithubUserUpsertOne {
	return u.Update(func(s *GithubUserUpsert) {
		s.SetGhUsername(v)
	})
}

// UpdateGhUsername sets the "gh_username" field to the value that was provided on create.
func (u *GithubUserUpsertOne) UpdateGhUsername() *GithubUserUpsertOne {
	return u.Update(func(s *GithubUserUpsert) {
		s.UpdateGhUsername()
	})
}

// SetSlackID sets the "slack_id" field.
func (u *GithubUserUpsertOne) SetSlackID(v string) *GithubUserUpsertOne {
	return u.Update(func(s *GithubUserUpsert) {
		s.SetSlackID(v)
	})
}

// UpdateSlackID sets the "slack_id" field to the value that was provided on create.
func (u *GithubUserUpsertOne) UpdateSlackID() *GithubUserUpsertOne {
	return u.Update(func(s *GithubUserUpsert) {
		s.UpdateSlackID()
	})
}

// SetGhAccessToken sets the "gh_access_token" field.
func (u *GithubUserUpsertOne) SetGhAccessToken(v string) *GithubUserUpsertOne {
	return u.Update(func(s *GithubUserUpsert) {
		s.SetGhAccessToken(v)
	})
}

// UpdateGhAccessToken sets the "gh_access_token" field to the value that was provided on create.
func (u *GithubUserUpsertOne) UpdateGhAccessToken() *GithubUserUpsertOne {
	return u.Update(func(s *GithubUserUpsert) {
		s.UpdateGhAccessToken()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GithubUserUpsertOne) SetCreatedAt(v time.Time) *GithubUserUpsertOne {
	return u.Update(func(s *GithubUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GithubUserUpsertOne) UpdateCreatedAt() *GithubUserUpsertOne {
	return u.Update(func(s *GithubUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubUserUpsertOne) SetUpdatedAt(v time.Time) *GithubUserUpsertOne {
	return u.Update(func(s *GithubUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubUserUpsertOne) UpdateUpdatedAt() *GithubUserUpsertOne {
	return u.Update(func(s *GithubUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *GithubUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GithubUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GithubUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GithubUserUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GithubUserUpsertOne.ID is not supported by MySQL driver. Use GithubUserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GithubUserUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GithubUserCreateBulk is the builder for creating many GithubUser entities in bulk.
type GithubUserCreateBulk struct {
	config
	err      error
	builders []*GithubUserCreate
	conflict []sql.ConflictOption
}

// Save creates the GithubUser entities in the database.
func (gucb *GithubUserCreateBulk) Save(ctx context.Context) ([]*GithubUser, error) {
	if gucb.err != nil {
		return nil, gucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gucb.builders))
	nodes := make([]*GithubUser, len(gucb.builders))
	mutators := make([]Mutator, len(gucb.builders))
	for i := range gucb.builders {
		func(i int, root context.Context) {
			builder := gucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GithubUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gucb *GithubUserCreateBulk) SaveX(ctx context.Context) []*GithubUser {
	v, err := gucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gucb *GithubUserCreateBulk) Exec(ctx context.Context) error {
	_, err := gucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gucb *GithubUserCreateBulk) ExecX(ctx context.Context) {
	if err := gucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GithubUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GithubUserUpsert) {
//			SetGhUsername(v+v).
//		}).
//		Exec(ctx)
func (gucb *GithubUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *GithubUserUpsertBulk {
	gucb.conflict = opts
	return &GithubUserUpsertBulk{
		create: gucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GithubUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gucb *GithubUserCreateBulk) OnConflictColumns(columns ...string) *GithubUserUpsertBulk {
	gucb.conflict = append(gucb.conflict, sql.ConflictColumns(columns...))
	return &GithubUserUpsertBulk{
		create: gucb,
	}
}

// GithubUserUpsertBulk is the builder for "upsert"-ing
// a bulk of GithubUser nodes.
type GithubUserUpsertBulk struct {
	create *GithubUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GithubUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(githubuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GithubUserUpsertBulk) UpdateNewValues() *GithubUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(githubuser.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GithubUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GithubUserUpsertBulk) Ignore() *GithubUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GithubUserUpsertBulk) DoNothing() *GithubUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GithubUserCreateBulk.OnConflict
// documentation for more info.
func (u *GithubUserUpsertBulk) Update(set func(*GithubUserUpsert)) *GithubUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GithubUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetGhUsername sets the "gh_username" field.
func (u *GithubUserUpsertBulk) SetGhUsername(v string) *GithubUserUpsertBulk {
	return u.Update(func(s *GithubUserUpsert) {
		s.SetGhUsername(v)
	})
}

// UpdateGhUsername sets the "gh_username" field to the value that was provided on create.
func (u *GithubUserUpsertBulk) UpdateGhUsername() *GithubUserUpsertBulk {
	return u.Update(func(s *GithubUserUpsert) {
		s.UpdateGhUsername()
	})
}

// SetSlackID sets the "slack_id" field.
func (u *GithubUserUpsertBulk) SetSlackID(v string) *GithubUserUpsertBulk {
	return u.Update(func(s *GithubUserUpsert) {
		s.SetSlackID(v)
	})
}

// UpdateSlackID sets the "slack_id" field to the value that was provided on create.
func (u *GithubUserUpsertBulk) UpdateSlackID() *GithubUserUpsertBulk {
	return u.Update(func(s *GithubUserUpsert) {
		s.UpdateSlackID()
	})
}

// SetGhAccessToken sets the "gh_access_token" field.
func (u *GithubUserUpsertBulk) SetGhAccessToken(v string) *GithubUserUpsertBulk {
	return u.Update(func(s *GithubUserUpsert) {
		s.SetGhAccessToken(v)
	})
}

// UpdateGhAccessToken sets the "gh_access_token" field to the value that was provided on create.
func (u *GithubUserUpsertBulk) UpdateGhAccessToken() *GithubUserUpsertBulk {
	return u.Update(func(s *GithubUserUpsert) {
		s.UpdateGhAccessToken()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GithubUserUpsertBulk) SetCreatedAt(v time.Time) *GithubUserUpsertBulk {
	return u.Update(func(s *GithubUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GithubUserUpsertBulk) UpdateCreatedAt() *GithubUserUpsertBulk {
	return u.Update(func(s *GithubUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubUserUpsertBulk) SetUpdatedAt(v time.Time) *GithubUserUpsertBulk {
	return u.Update(func(s *GithubUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubUserUpsertBulk) UpdateUpdatedAt() *GithubUserUpsertBulk {
	return u.Update(func(s *GithubUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *GithubUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GithubUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GithubUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GithubUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
