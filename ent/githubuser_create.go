// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slackbot/ent/githubuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GithubUserCreate is the builder for creating a GithubUser entity.
type GithubUserCreate struct {
	config
	mutation *GithubUserMutation
	hooks    []Hook
}

// SetGhUsername sets the "gh_username" field.
func (guc *GithubUserCreate) SetGhUsername(s string) *GithubUserCreate {
	guc.mutation.SetGhUsername(s)
	return guc
}

// SetSlackID sets the "slack_id" field.
func (guc *GithubUserCreate) SetSlackID(s string) *GithubUserCreate {
	guc.mutation.SetSlackID(s)
	return guc
}

// SetGhAccessToken sets the "gh_access_token" field.
func (guc *GithubUserCreate) SetGhAccessToken(s string) *GithubUserCreate {
	guc.mutation.SetGhAccessToken(s)
	return guc
}

// SetCreatedAt sets the "created_at" field.
func (guc *GithubUserCreate) SetCreatedAt(t time.Time) *GithubUserCreate {
	guc.mutation.SetCreatedAt(t)
	return guc
}

// SetUpdatedAt sets the "updated_at" field.
func (guc *GithubUserCreate) SetUpdatedAt(t time.Time) *GithubUserCreate {
	guc.mutation.SetUpdatedAt(t)
	return guc
}

// SetID sets the "id" field.
func (guc *GithubUserCreate) SetID(u uuid.UUID) *GithubUserCreate {
	guc.mutation.SetID(u)
	return guc
}

// Mutation returns the GithubUserMutation object of the builder.
func (guc *GithubUserCreate) Mutation() *GithubUserMutation {
	return guc.mutation
}

// Save creates the GithubUser in the database.
func (guc *GithubUserCreate) Save(ctx context.Context) (*GithubUser, error) {
	return withHooks(ctx, guc.sqlSave, guc.mutation, guc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (guc *GithubUserCreate) SaveX(ctx context.Context) *GithubUser {
	v, err := guc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (guc *GithubUserCreate) Exec(ctx context.Context) error {
	_, err := guc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guc *GithubUserCreate) ExecX(ctx context.Context) {
	if err := guc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guc *GithubUserCreate) check() error {
	if _, ok := guc.mutation.GhUsername(); !ok {
		return &ValidationError{Name: "gh_username", err: errors.New(`ent: missing required field "GithubUser.gh_username"`)}
	}
	if _, ok := guc.mutation.SlackID(); !ok {
		return &ValidationError{Name: "slack_id", err: errors.New(`ent: missing required field "GithubUser.slack_id"`)}
	}
	if _, ok := guc.mutation.GhAccessToken(); !ok {
		return &ValidationError{Name: "gh_access_token", err: errors.New(`ent: missing required field "GithubUser.gh_access_token"`)}
	}
	if _, ok := guc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GithubUser.created_at"`)}
	}
	if _, ok := guc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GithubUser.updated_at"`)}
	}
	return nil
}

func (guc *GithubUserCreate) sqlSave(ctx context.Context) (*GithubUser, error) {
	if err := guc.check(); err != nil {
		return nil, err
	}
	_node, _spec := guc.createSpec()
	if err := sqlgraph.CreateNode(ctx, guc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	guc.mutation.id = &_node.ID
	guc.mutation.done = true
	return _node, nil
}

func (guc *GithubUserCreate) createSpec() (*GithubUser, *sqlgraph.CreateSpec) {
	var (
		_node = &GithubUser{config: guc.config}
		_spec = sqlgraph.NewCreateSpec(githubuser.Table, sqlgraph.NewFieldSpec(githubuser.FieldID, field.TypeUUID))
	)
	if id, ok := guc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := guc.mutation.GhUsername(); ok {
		_spec.SetField(githubuser.FieldGhUsername, field.TypeString, value)
		_node.GhUsername = value
	}
	if value, ok := guc.mutation.SlackID(); ok {
		_spec.SetField(githubuser.FieldSlackID, field.TypeString, value)
		_node.SlackID = value
	}
	if value, ok := guc.mutation.GhAccessToken(); ok {
		_spec.SetField(githubuser.FieldGhAccessToken, field.TypeString, value)
		_node.GhAccessToken = value
	}
	if value, ok := guc.mutation.CreatedAt(); ok {
		_spec.SetField(githubuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := guc.mutation.UpdatedAt(); ok {
		_spec.SetField(githubuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// GithubUserCreateBulk is the builder for creating many GithubUser entities in bulk.
type GithubUserCreateBulk struct {
	config
	err      error
	builders []*GithubUserCreate
}

// Save creates the GithubUser entities in the database.
func (gucb *GithubUserCreateBulk) Save(ctx context.Context) ([]*GithubUser, error) {
	if gucb.err != nil {
		return nil, gucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gucb.builders))
	nodes := make([]*GithubUser, len(gucb.builders))
	mutators := make([]Mutator, len(gucb.builders))
	for i := range gucb.builders {
		func(i int, root context.Context) {
			builder := gucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GithubUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gucb *GithubUserCreateBulk) SaveX(ctx context.Context) []*GithubUser {
	v, err := gucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gucb *GithubUserCreateBulk) Exec(ctx context.Context) error {
	_, err := gucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gucb *GithubUserCreateBulk) ExecX(ctx context.Context) {
	if err := gucb.Exec(ctx); err != nil {
		panic(err)
	}
}
