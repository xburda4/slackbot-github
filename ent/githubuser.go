// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slackbot/ent/githubuser"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// GithubUser is the model entity for the GithubUser schema.
type GithubUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GhUsername holds the value of the "gh_username" field.
	GhUsername string `json:"gh_username,omitempty"`
	// SlackID holds the value of the "slack_id" field.
	SlackID string `json:"slack_id,omitempty"`
	// GhAccessToken holds the value of the "gh_access_token" field.
	GhAccessToken string `json:"gh_access_token,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GithubUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case githubuser.FieldGhUsername, githubuser.FieldSlackID, githubuser.FieldGhAccessToken:
			values[i] = new(sql.NullString)
		case githubuser.FieldCreatedAt, githubuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case githubuser.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GithubUser fields.
func (gu *GithubUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case githubuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gu.ID = *value
			}
		case githubuser.FieldGhUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gh_username", values[i])
			} else if value.Valid {
				gu.GhUsername = value.String
			}
		case githubuser.FieldSlackID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slack_id", values[i])
			} else if value.Valid {
				gu.SlackID = value.String
			}
		case githubuser.FieldGhAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gh_access_token", values[i])
			} else if value.Valid {
				gu.GhAccessToken = value.String
			}
		case githubuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gu.CreatedAt = value.Time
			}
		case githubuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gu.UpdatedAt = value.Time
			}
		default:
			gu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GithubUser.
// This includes values selected through modifiers, order, etc.
func (gu *GithubUser) Value(name string) (ent.Value, error) {
	return gu.selectValues.Get(name)
}

// Update returns a builder for updating this GithubUser.
// Note that you need to call GithubUser.Unwrap() before calling this method if this GithubUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (gu *GithubUser) Update() *GithubUserUpdateOne {
	return NewGithubUserClient(gu.config).UpdateOne(gu)
}

// Unwrap unwraps the GithubUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gu *GithubUser) Unwrap() *GithubUser {
	_tx, ok := gu.config.driver.(*txDriver)
	if !ok {
		panic("ent: GithubUser is not a transactional entity")
	}
	gu.config.driver = _tx.drv
	return gu
}

// String implements the fmt.Stringer.
func (gu *GithubUser) String() string {
	var builder strings.Builder
	builder.WriteString("GithubUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gu.ID))
	builder.WriteString("gh_username=")
	builder.WriteString(gu.GhUsername)
	builder.WriteString(", ")
	builder.WriteString("slack_id=")
	builder.WriteString(gu.SlackID)
	builder.WriteString(", ")
	builder.WriteString("gh_access_token=")
	builder.WriteString(gu.GhAccessToken)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gu.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GithubUsers is a parsable slice of GithubUser.
type GithubUsers []*GithubUser
