// Code generated by ent, DO NOT EDIT.

package githubuser

import (
	"slackbot/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLTE(FieldID, id))
}

// GhUsername applies equality check predicate on the "gh_username" field. It's identical to GhUsernameEQ.
func GhUsername(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldGhUsername, v))
}

// SlackID applies equality check predicate on the "slack_id" field. It's identical to SlackIDEQ.
func SlackID(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldSlackID, v))
}

// GhAccessToken applies equality check predicate on the "gh_access_token" field. It's identical to GhAccessTokenEQ.
func GhAccessToken(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldGhAccessToken, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// GhUsernameEQ applies the EQ predicate on the "gh_username" field.
func GhUsernameEQ(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldGhUsername, v))
}

// GhUsernameNEQ applies the NEQ predicate on the "gh_username" field.
func GhUsernameNEQ(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNEQ(FieldGhUsername, v))
}

// GhUsernameIn applies the In predicate on the "gh_username" field.
func GhUsernameIn(vs ...string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldIn(FieldGhUsername, vs...))
}

// GhUsernameNotIn applies the NotIn predicate on the "gh_username" field.
func GhUsernameNotIn(vs ...string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNotIn(FieldGhUsername, vs...))
}

// GhUsernameGT applies the GT predicate on the "gh_username" field.
func GhUsernameGT(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGT(FieldGhUsername, v))
}

// GhUsernameGTE applies the GTE predicate on the "gh_username" field.
func GhUsernameGTE(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGTE(FieldGhUsername, v))
}

// GhUsernameLT applies the LT predicate on the "gh_username" field.
func GhUsernameLT(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLT(FieldGhUsername, v))
}

// GhUsernameLTE applies the LTE predicate on the "gh_username" field.
func GhUsernameLTE(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLTE(FieldGhUsername, v))
}

// GhUsernameContains applies the Contains predicate on the "gh_username" field.
func GhUsernameContains(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldContains(FieldGhUsername, v))
}

// GhUsernameHasPrefix applies the HasPrefix predicate on the "gh_username" field.
func GhUsernameHasPrefix(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldHasPrefix(FieldGhUsername, v))
}

// GhUsernameHasSuffix applies the HasSuffix predicate on the "gh_username" field.
func GhUsernameHasSuffix(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldHasSuffix(FieldGhUsername, v))
}

// GhUsernameEqualFold applies the EqualFold predicate on the "gh_username" field.
func GhUsernameEqualFold(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEqualFold(FieldGhUsername, v))
}

// GhUsernameContainsFold applies the ContainsFold predicate on the "gh_username" field.
func GhUsernameContainsFold(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldContainsFold(FieldGhUsername, v))
}

// SlackIDEQ applies the EQ predicate on the "slack_id" field.
func SlackIDEQ(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldSlackID, v))
}

// SlackIDNEQ applies the NEQ predicate on the "slack_id" field.
func SlackIDNEQ(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNEQ(FieldSlackID, v))
}

// SlackIDIn applies the In predicate on the "slack_id" field.
func SlackIDIn(vs ...string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldIn(FieldSlackID, vs...))
}

// SlackIDNotIn applies the NotIn predicate on the "slack_id" field.
func SlackIDNotIn(vs ...string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNotIn(FieldSlackID, vs...))
}

// SlackIDGT applies the GT predicate on the "slack_id" field.
func SlackIDGT(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGT(FieldSlackID, v))
}

// SlackIDGTE applies the GTE predicate on the "slack_id" field.
func SlackIDGTE(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGTE(FieldSlackID, v))
}

// SlackIDLT applies the LT predicate on the "slack_id" field.
func SlackIDLT(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLT(FieldSlackID, v))
}

// SlackIDLTE applies the LTE predicate on the "slack_id" field.
func SlackIDLTE(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLTE(FieldSlackID, v))
}

// SlackIDContains applies the Contains predicate on the "slack_id" field.
func SlackIDContains(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldContains(FieldSlackID, v))
}

// SlackIDHasPrefix applies the HasPrefix predicate on the "slack_id" field.
func SlackIDHasPrefix(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldHasPrefix(FieldSlackID, v))
}

// SlackIDHasSuffix applies the HasSuffix predicate on the "slack_id" field.
func SlackIDHasSuffix(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldHasSuffix(FieldSlackID, v))
}

// SlackIDEqualFold applies the EqualFold predicate on the "slack_id" field.
func SlackIDEqualFold(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEqualFold(FieldSlackID, v))
}

// SlackIDContainsFold applies the ContainsFold predicate on the "slack_id" field.
func SlackIDContainsFold(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldContainsFold(FieldSlackID, v))
}

// GhAccessTokenEQ applies the EQ predicate on the "gh_access_token" field.
func GhAccessTokenEQ(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldGhAccessToken, v))
}

// GhAccessTokenNEQ applies the NEQ predicate on the "gh_access_token" field.
func GhAccessTokenNEQ(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNEQ(FieldGhAccessToken, v))
}

// GhAccessTokenIn applies the In predicate on the "gh_access_token" field.
func GhAccessTokenIn(vs ...string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldIn(FieldGhAccessToken, vs...))
}

// GhAccessTokenNotIn applies the NotIn predicate on the "gh_access_token" field.
func GhAccessTokenNotIn(vs ...string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNotIn(FieldGhAccessToken, vs...))
}

// GhAccessTokenGT applies the GT predicate on the "gh_access_token" field.
func GhAccessTokenGT(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGT(FieldGhAccessToken, v))
}

// GhAccessTokenGTE applies the GTE predicate on the "gh_access_token" field.
func GhAccessTokenGTE(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGTE(FieldGhAccessToken, v))
}

// GhAccessTokenLT applies the LT predicate on the "gh_access_token" field.
func GhAccessTokenLT(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLT(FieldGhAccessToken, v))
}

// GhAccessTokenLTE applies the LTE predicate on the "gh_access_token" field.
func GhAccessTokenLTE(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLTE(FieldGhAccessToken, v))
}

// GhAccessTokenContains applies the Contains predicate on the "gh_access_token" field.
func GhAccessTokenContains(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldContains(FieldGhAccessToken, v))
}

// GhAccessTokenHasPrefix applies the HasPrefix predicate on the "gh_access_token" field.
func GhAccessTokenHasPrefix(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldHasPrefix(FieldGhAccessToken, v))
}

// GhAccessTokenHasSuffix applies the HasSuffix predicate on the "gh_access_token" field.
func GhAccessTokenHasSuffix(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldHasSuffix(FieldGhAccessToken, v))
}

// GhAccessTokenEqualFold applies the EqualFold predicate on the "gh_access_token" field.
func GhAccessTokenEqualFold(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEqualFold(FieldGhAccessToken, v))
}

// GhAccessTokenContainsFold applies the ContainsFold predicate on the "gh_access_token" field.
func GhAccessTokenContainsFold(v string) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldContainsFold(FieldGhAccessToken, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GithubUser {
	return predicate.GithubUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GithubUser) predicate.GithubUser {
	return predicate.GithubUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GithubUser) predicate.GithubUser {
	return predicate.GithubUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GithubUser) predicate.GithubUser {
	return predicate.GithubUser(sql.NotPredicates(p))
}
