// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slackbot/ent/githubuser"
	"slackbot/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGithubUser = "GithubUser"
)

// GithubUserMutation represents an operation that mutates the GithubUser nodes in the graph.
type GithubUserMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	gh_username     *string
	slack_id        *string
	gh_access_token *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*GithubUser, error)
	predicates      []predicate.GithubUser
}

var _ ent.Mutation = (*GithubUserMutation)(nil)

// githubuserOption allows management of the mutation configuration using functional options.
type githubuserOption func(*GithubUserMutation)

// newGithubUserMutation creates new mutation for the GithubUser entity.
func newGithubUserMutation(c config, op Op, opts ...githubuserOption) *GithubUserMutation {
	m := &GithubUserMutation{
		config:        c,
		op:            op,
		typ:           TypeGithubUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGithubUserID sets the ID field of the mutation.
func withGithubUserID(id uuid.UUID) githubuserOption {
	return func(m *GithubUserMutation) {
		var (
			err   error
			once  sync.Once
			value *GithubUser
		)
		m.oldValue = func(ctx context.Context) (*GithubUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GithubUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGithubUser sets the old GithubUser of the mutation.
func withGithubUser(node *GithubUser) githubuserOption {
	return func(m *GithubUserMutation) {
		m.oldValue = func(context.Context) (*GithubUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GithubUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GithubUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GithubUser entities.
func (m *GithubUserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GithubUserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GithubUserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GithubUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGhUsername sets the "gh_username" field.
func (m *GithubUserMutation) SetGhUsername(s string) {
	m.gh_username = &s
}

// GhUsername returns the value of the "gh_username" field in the mutation.
func (m *GithubUserMutation) GhUsername() (r string, exists bool) {
	v := m.gh_username
	if v == nil {
		return
	}
	return *v, true
}

// OldGhUsername returns the old "gh_username" field's value of the GithubUser entity.
// If the GithubUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubUserMutation) OldGhUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGhUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGhUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGhUsername: %w", err)
	}
	return oldValue.GhUsername, nil
}

// ResetGhUsername resets all changes to the "gh_username" field.
func (m *GithubUserMutation) ResetGhUsername() {
	m.gh_username = nil
}

// SetSlackID sets the "slack_id" field.
func (m *GithubUserMutation) SetSlackID(s string) {
	m.slack_id = &s
}

// SlackID returns the value of the "slack_id" field in the mutation.
func (m *GithubUserMutation) SlackID() (r string, exists bool) {
	v := m.slack_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSlackID returns the old "slack_id" field's value of the GithubUser entity.
// If the GithubUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubUserMutation) OldSlackID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlackID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlackID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlackID: %w", err)
	}
	return oldValue.SlackID, nil
}

// ResetSlackID resets all changes to the "slack_id" field.
func (m *GithubUserMutation) ResetSlackID() {
	m.slack_id = nil
}

// SetGhAccessToken sets the "gh_access_token" field.
func (m *GithubUserMutation) SetGhAccessToken(s string) {
	m.gh_access_token = &s
}

// GhAccessToken returns the value of the "gh_access_token" field in the mutation.
func (m *GithubUserMutation) GhAccessToken() (r string, exists bool) {
	v := m.gh_access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldGhAccessToken returns the old "gh_access_token" field's value of the GithubUser entity.
// If the GithubUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubUserMutation) OldGhAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGhAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGhAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGhAccessToken: %w", err)
	}
	return oldValue.GhAccessToken, nil
}

// ResetGhAccessToken resets all changes to the "gh_access_token" field.
func (m *GithubUserMutation) ResetGhAccessToken() {
	m.gh_access_token = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GithubUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GithubUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GithubUser entity.
// If the GithubUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GithubUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GithubUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GithubUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GithubUser entity.
// If the GithubUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GithubUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the GithubUserMutation builder.
func (m *GithubUserMutation) Where(ps ...predicate.GithubUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GithubUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GithubUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GithubUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GithubUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GithubUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GithubUser).
func (m *GithubUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GithubUserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.gh_username != nil {
		fields = append(fields, githubuser.FieldGhUsername)
	}
	if m.slack_id != nil {
		fields = append(fields, githubuser.FieldSlackID)
	}
	if m.gh_access_token != nil {
		fields = append(fields, githubuser.FieldGhAccessToken)
	}
	if m.created_at != nil {
		fields = append(fields, githubuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, githubuser.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GithubUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case githubuser.FieldGhUsername:
		return m.GhUsername()
	case githubuser.FieldSlackID:
		return m.SlackID()
	case githubuser.FieldGhAccessToken:
		return m.GhAccessToken()
	case githubuser.FieldCreatedAt:
		return m.CreatedAt()
	case githubuser.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GithubUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case githubuser.FieldGhUsername:
		return m.OldGhUsername(ctx)
	case githubuser.FieldSlackID:
		return m.OldSlackID(ctx)
	case githubuser.FieldGhAccessToken:
		return m.OldGhAccessToken(ctx)
	case githubuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case githubuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown GithubUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GithubUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case githubuser.FieldGhUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGhUsername(v)
		return nil
	case githubuser.FieldSlackID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlackID(v)
		return nil
	case githubuser.FieldGhAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGhAccessToken(v)
		return nil
	case githubuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case githubuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown GithubUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GithubUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GithubUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GithubUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GithubUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GithubUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GithubUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GithubUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GithubUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GithubUserMutation) ResetField(name string) error {
	switch name {
	case githubuser.FieldGhUsername:
		m.ResetGhUsername()
		return nil
	case githubuser.FieldSlackID:
		m.ResetSlackID()
		return nil
	case githubuser.FieldGhAccessToken:
		m.ResetGhAccessToken()
		return nil
	case githubuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case githubuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown GithubUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GithubUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GithubUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GithubUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GithubUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GithubUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GithubUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GithubUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GithubUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GithubUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GithubUser edge %s", name)
}
